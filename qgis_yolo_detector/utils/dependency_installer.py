"""
Installateur automatique de d√©pendances pour le plugin YOLO Interactive Detector

Ce module g√®re l'installation automatique des d√©pendances Python n√©cessaires
au fonctionnement du plugin dans l'environnement QGIS.
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import json

from qgis.PyQt.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, 
                           QLabel, QProgressBar, QTextEdit, QCheckBox, QMessageBox,
                           QGroupBox, QScrollArea, QWidget)
from qgis.PyQt.QtCore import QThread, pyqtSignal, QTimer, Qt
from qgis.PyQt.QtGui import QFont, QPixmap, QIcon


class DependencyChecker:
    """V√©rificateur de d√©pendances avec diagnostics d√©taill√©s"""
    
    REQUIRED_PACKAGES = {
        'torch': {
            'name': 'PyTorch',
            'import_name': 'torch',
            'pip_name': 'torch',
            'description': 'Framework de deep learning - Requis pour YOLO',
            'critical': True,
            'install_url': 'https://pytorch.org/get-started/locally/',
            'check_function': '_check_torch'
        },
        'ultralytics': {
            'name': 'Ultralytics YOLO',
            'import_name': 'ultralytics',
            'pip_name': 'ultralytics',
            'description': 'Framework YOLO v8 + FastSAM - C≈ìur du syst√®me de d√©tection',
            'critical': True,
            'install_url': 'https://docs.ultralytics.com/quickstart/',
            'check_function': '_check_ultralytics'
        },
        'cv2': {
            'name': 'OpenCV',
            'import_name': 'cv2',
            'pip_name': 'opencv-python',
            'description': 'Traitement d\'images - Requis pour la manipulation d\'images',
            'critical': True,
            'install_url': 'https://opencv.org/',
            'check_function': '_check_opencv'
        },
        'PIL': {
            'name': 'Pillow',
            'import_name': 'PIL',
            'pip_name': 'Pillow',
            'description': 'Manipulation d\'images Python',
            'critical': True,
            'install_url': 'https://pillow.readthedocs.io/',
            'check_function': '_check_pillow'
        },
        'numpy': {
            'name': 'NumPy',
            'import_name': 'numpy',
            'pip_name': 'numpy',
            'description': 'Calcul num√©rique - G√©n√©ralement d√©j√† install√© avec QGIS',
            'critical': True,
            'install_url': 'https://numpy.org/',
            'check_function': '_check_numpy'
        },
        
        # NEW v1.5.0: Smart Assistant Dependencies (Optional but recommended)
        'segment_anything': {
            'name': 'Segment Anything (Meta SAM)',
            'import_name': 'segment_anything',
            'pip_name': 'segment-anything',
            'description': 'Model SAM de Meta - Pour Smart Mode pr√©cision maximale',
            'critical': False,  # Optionnel
            'install_url': 'https://github.com/facebookresearch/segment-anything',
            'check_function': '_check_sam'
        },
        'mobile_sam': {
            'name': 'MobileSAM',
            'import_name': 'mobile_sam',
            'pip_name': 'mobile-sam',
            'description': 'SAM l√©ger optimis√© CPU - Alternative pour Smart Mode',
            'critical': False,  # Optionnel
            'install_url': 'https://github.com/ChaoningZhang/MobileSAM',
            'check_function': '_check_mobile_sam'
        }
    }
    
    def __init__(self):
        self.python_executable = sys.executable
        self.pip_available = self._check_pip_available()
        
        # S√âCURIT√â: Configurer Ultralytics pour √©viter les t√©l√©chargements d√®s l'initialisation
        self._configure_ultralytics_offline_mode()
        
    def _check_pip_available(self) -> bool:
        """V√©rifie si pip est disponible"""
        try:
            result = subprocess.run([self.python_executable, '-m', 'pip', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            return result.returncode == 0
        except:
            return False
    
    def _configure_ultralytics_offline_mode(self):
        """Configure Ultralytics en mode offline pour √©viter les t√©l√©chargements"""
        try:
            import os
            from pathlib import Path
            
            # S√âCURIT√â: Utiliser r√©pertoire du plugin au lieu de cwd()
            plugin_dir = Path(__file__).parent.parent
            secure_dir = plugin_dir.parent / 'qgis_yolo_detector_data'
            config_dir = secure_dir / 'config'
            config_dir.mkdir(parents=True, exist_ok=True)
            
            # Variables d'environnement Ultralytics
            os.environ['YOLO_CONFIG_DIR'] = str(config_dir)
            os.environ['ULTRALYTICS_CONFIG_DIR'] = str(config_dir)
            
            # Forcer le mode offline 
            os.environ['YOLO_OFFLINE'] = '1'
            os.environ['ULTRALYTICS_OFFLINE'] = '1'
            
            # D√©sactiver les t√©l√©chargements automatiques
            os.environ['YOLO_NO_DOWNLOADS'] = '1'
            
            print("üîí Mode offline Ultralytics configur√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur configuration offline: {e}")
    
    def check_all_dependencies(self) -> Dict[str, Dict]:
        """
        V√©rifie toutes les d√©pendances
        
        Returns:
            Dict: √âtat de chaque d√©pendance
        """
        results = {}
        
        for package_key, package_info in self.REQUIRED_PACKAGES.items():
            check_func = getattr(self, package_info['check_function'], self._check_generic)
            results[package_key] = check_func(package_info)
        
        return results
    
    def _check_generic(self, package_info: Dict) -> Dict:
        """V√©rification g√©n√©rique d'un package"""
        try:
            spec = importlib.util.find_spec(package_info['import_name'])
            if spec is None:
                return {
                    'available': False,
                    'version': None,
                    'error': f"Module {package_info['import_name']} non trouv√©",
                    'info': package_info
                }
            
            # Tentative d'import pour v√©rifier la validit√©
            module = importlib.import_module(package_info['import_name'])
            version = getattr(module, '__version__', 'Version inconnue')
            
            return {
                'available': True,
                'version': version,
                'error': None,
                'info': package_info
            }
            
        except Exception as e:
            return {
                'available': False,
                'version': None,
                'error': f"Erreur d'import: {str(e)}",
                'info': package_info
            }
    
    def _check_torch(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour PyTorch"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                import torch
                result['cuda_available'] = torch.cuda.is_available()
                result['cuda_version'] = torch.version.cuda if torch.cuda.is_available() else None
                result['device_count'] = torch.cuda.device_count() if torch.cuda.is_available() else 0
            except:
                result['cuda_available'] = False
                result['cuda_version'] = None
                result['device_count'] = 0
        
        return result
    
    def _check_ultralytics(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour Ultralytics"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                from ultralytics import YOLO
                # S√âCURIT√â: Test basique sans t√©l√©chargement de mod√®le
                # V√©rifier que les classes principales existent
                yolo_classes = ['YOLO']
                for cls_name in yolo_classes:
                    if not hasattr(YOLO, '__init__'):
                        raise AttributeError(f"Classe {cls_name} manquante")
                
                result['yolo_functional'] = True
                result['model_test'] = 'Import OK - √âvite t√©l√©chargement'
            except Exception as e:
                result['yolo_functional'] = False
                result['model_test'] = f'Erreur: {str(e)}'
        
        return result
    
    def _check_opencv(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour OpenCV"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                import cv2
                # Test des fonctionnalit√©s de base
                cv2.imread  # V√©rification que les fonctions sont accessibles
                result['build_info'] = cv2.getBuildInformation().split('\n')[0]
            except Exception as e:
                result['available'] = False
                result['error'] = f'OpenCV non fonctionnel: {str(e)}'
        
        return result
    
    def _check_pillow(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour Pillow"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                from PIL import Image
                # Test de base
                result['formats'] = len(Image.registered_extensions())
            except Exception as e:
                result['available'] = False
                result['error'] = f'Pillow non fonctionnel: {str(e)}'
        
        return result
    
    def _check_numpy(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour NumPy"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                import numpy as np
                result['blas_info'] = 'BLAS disponible' if np.show_config is not None else 'BLAS non d√©tect√©'
            except:
                result['blas_info'] = 'Inconnu'
        
        return result
    
    def _check_sam(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour Segment Anything Model"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                from segment_anything import SamPredictor, sam_model_registry
                result['sam_models'] = list(sam_model_registry.keys())
                result['sam_functional'] = True
            except ImportError:
                result['available'] = False
                result['error'] = 'segment-anything non fonctionnel'
            except Exception as e:
                result['sam_functional'] = False
                result['error'] = f'SAM test √©chou√©: {str(e)}'
        
        return result
    
    def _check_mobile_sam(self, package_info: Dict) -> Dict:
        """V√©rification sp√©cialis√©e pour MobileSAM"""
        result = self._check_generic(package_info)
        
        if result['available']:
            try:
                from mobile_sam import sam_model_registry, SamPredictor
                result['mobile_sam_models'] = list(sam_model_registry.keys())
                result['mobile_sam_functional'] = True
            except ImportError:
                result['available'] = False
                result['error'] = 'mobile-sam non fonctionnel'
            except Exception as e:
                result['mobile_sam_functional'] = False
                result['error'] = f'MobileSAM test √©chou√©: {str(e)}'
        
        return result


class DependencyInstaller(QThread):
    """Thread d'installation des d√©pendances"""
    
    progress_updated = pyqtSignal(int, str)  # (progress, message)
    installation_finished = pyqtSignal(bool, str)  # (success, message)
    
    def __init__(self, packages_to_install: List[str]):
        super().__init__()
        self.packages_to_install = packages_to_install
        self.python_executable = sys.executable
        
    def run(self):
        """Ex√©cute l'installation des packages"""
        total_packages = len(self.packages_to_install)
        
        if total_packages == 0:
            self.installation_finished.emit(True, "Aucune installation n√©cessaire")
            return
        
        success_count = 0
        failed_packages = []
        
        for i, package in enumerate(self.packages_to_install):
            progress = int((i / total_packages) * 100)
            self.progress_updated.emit(progress, f"Installation de {package}...")
            
            if self._install_package(package):
                success_count += 1
                self.progress_updated.emit(
                    int(((i + 1) / total_packages) * 100), 
                    f"‚úÖ {package} install√© avec succ√®s"
                )
            else:
                failed_packages.append(package)
                self.progress_updated.emit(
                    int(((i + 1) / total_packages) * 100), 
                    f"‚ùå √âchec installation {package}"
                )
        
        # R√©sultat final
        if success_count == total_packages:
            self.installation_finished.emit(True, f"‚úÖ Toutes les d√©pendances install√©es ({success_count}/{total_packages})")
        else:
            message = f"‚ö†Ô∏è Installation partielle: {success_count}/{total_packages} r√©ussies"
            if failed_packages:
                message += f"\n√âchecs: {', '.join(failed_packages)}"
            self.installation_finished.emit(False, message)
    
    def _install_package(self, package: str) -> bool:
        """Installation r√©elle des packages requis"""
        print(f"üîß Tentative d'installation: {package}")
        
        # M√©thodes d'installation en ordre de pr√©f√©rence
        install_methods = [
            self._install_with_pip_subprocess,
            self._install_with_pip_api,
            self._install_with_temp_script
        ]
        
        for method in install_methods:
            try:
                print(f"üîÑ Essai m√©thode: {method.__name__}")
                if method(package):
                    print(f"‚úÖ {package} install√© avec succ√®s via {method.__name__}")
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è √âchec {method.__name__}: {e}")
                continue
        
        # Si toutes les m√©thodes √©chouent
        print(f"‚ùå Impossible d'installer {package} automatiquement")
        print("üõ°Ô∏è Si votre centre de s√©curit√© bloque l'installation:")
        print("   1. Ajoutez pip.exe aux exceptions de votre antivirus")
        print("   2. Ou installez manuellement: pip install --user " + package)
        print("   3. Ou utilisez conda install au lieu de pip")
        return False
    
    def _install_with_pip_subprocess(self, package: str) -> bool:
        """Installation via subprocess s√©curis√©"""
        try:
            import subprocess
            import sys
            
            # Commande d'installation s√©curis√©e
            cmd = [sys.executable, '-m', 'pip', 'install', '--user', '--upgrade', package]
            print(f"üöÄ Ex√©cution: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=600,  # 10 minutes max
                cwd=None  # R√©pertoire courant
            )
            
            if result.returncode == 0:
                print(f"‚úÖ Installation r√©ussie: {package}")
                if result.stdout:
                    print(f"Output: {result.stdout[-200:]}...")  # Derniers 200 caract√®res
                return True
            else:
                print(f"‚ùå √âchec installation {package}: code {result.returncode}")
                if result.stderr:
                    print(f"Erreur: {result.stderr[-200:]}...")  # Derniers 200 caract√®res
                return False
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout installation {package}")
            return False
        except Exception as e:
            print(f"‚ùå Exception subprocess: {e}")
            return False
    
    def _install_with_pip_api(self, package: str) -> bool:
        """Tentative d'installation avec l'API pip directe"""
        try:
            import pip
            # Utiliser l'API interne de pip (compatible QGIS)
            if hasattr(pip, 'main'):
                # pip < 10.0
                result = pip.main(['install', '--user', '--upgrade', package])
                return result == 0
            else:
                # pip >= 10.0 - pas d'API directe, utiliser subprocess
                print("üîÑ pip moderne d√©tect√©, utilisation subprocess...")
                return self._install_with_pip_subprocess(package)
        except Exception as e:
            print(f"‚ùå API pip √©chou√©e: {e}")
            return False
    
    def _install_with_temp_script(self, package: str) -> bool:
        """Installation via script temporaire (fallback)"""
        try:
            import tempfile
            import os
            
            # Cr√©er un script batch Windows pour √©viter les hooks QGIS
            if os.name == 'nt':  # Windows
                script_content = f'''@echo off
"{self.python_executable}" -m pip install --user --upgrade "{package}"
exit %ERRORLEVEL%'''
                script_ext = '.bat'
            else:  # Linux/Mac
                script_content = f'''#!/bin/bash
"{self.python_executable}" -m pip install --user --upgrade "{package}"
exit $?'''
                script_ext = '.sh'
            
            # √âcrire le script temporaire
            with tempfile.NamedTemporaryFile(mode='w', suffix=script_ext, delete=False) as f:
                f.write(script_content)
                temp_script = f.name
            
            try:
                # Rendre le script ex√©cutable sur Unix
                if os.name != 'nt':
                    os.chmod(temp_script, 0o755)
                
                # Ex√©cuter le script
                result = subprocess.run([temp_script], capture_output=True, text=True, timeout=300)
                return result.returncode == 0
            finally:
                # Nettoyer le fichier temporaire
                try:
                    os.unlink(temp_script)
                except:
                    pass
                    
        except Exception:
            return False


class DependencyDialog(QDialog):
    """Dialog d'installation des d√©pendances"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("YOLO Detector - Gestionnaire de D√©pendances")
        self.setMinimumSize(800, 600)
        
        self.checker = DependencyChecker()
        self.installer = None
        
        self.init_ui()
        self.check_dependencies()
        
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        layout = QVBoxLayout(self)
        
        # En-t√™te
        header_label = QLabel("üîß Gestionnaire de D√©pendances YOLO Interactive Detector")
        header_font = QFont()
        header_font.setPointSize(14)
        header_font.setBold(True)
        header_label.setFont(header_font)
        layout.addWidget(header_label)
        
        # Zone de statut
        self.status_group = QGroupBox("√âtat des D√©pendances")
        self.status_layout = QVBoxLayout(self.status_group)
        
        # Scroll area pour les d√©pendances
        scroll = QScrollArea()
        scroll_widget = QWidget()
        self.dependencies_layout = QVBoxLayout(scroll_widget)
        scroll.setWidget(scroll_widget)
        scroll.setWidgetResizable(True)
        self.status_layout.addWidget(scroll)
        
        layout.addWidget(self.status_group)
        
        # Barre de progression
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Zone de log
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(150)
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)
        
        # Boutons
        buttons_layout = QHBoxLayout()
        
        self.refresh_button = QPushButton("üîÑ Actualiser")
        self.refresh_button.clicked.connect(self.check_dependencies)
        buttons_layout.addWidget(self.refresh_button)
        
        self.install_button = QPushButton("üì¶ Installer les D√©pendances Manquantes")
        self.install_button.clicked.connect(self.install_missing_dependencies)
        self.install_button.setEnabled(False)
        buttons_layout.addWidget(self.install_button)
        
        buttons_layout.addStretch()
        
        self.close_button = QPushButton("Fermer")
        self.close_button.clicked.connect(self.accept)
        buttons_layout.addWidget(self.close_button)
        
        layout.addLayout(buttons_layout)
        
    def check_dependencies(self):
        """V√©rifie l'√©tat des d√©pendances"""
        self.log_text.append("üîç V√©rification des d√©pendances...")
        
        # Clear previous results
        for i in reversed(range(self.dependencies_layout.count())): 
            self.dependencies_layout.itemAt(i).widget().setParent(None)
        
        self.dependency_results = self.checker.check_all_dependencies()
        missing_packages = []
        
        for package_key, result in self.dependency_results.items():
            widget = self._create_dependency_widget(package_key, result)
            self.dependencies_layout.addWidget(widget)
            
            if not result['available'] and result['info']['critical']:
                missing_packages.append(result['info']['pip_name'])
        
        # √âtat global
        if missing_packages:
            self.install_button.setEnabled(True)
            self.install_button.setText(f"üì¶ Installer {len(missing_packages)} d√©pendance(s) manquante(s)")
            self.log_text.append(f"‚ö†Ô∏è {len(missing_packages)} d√©pendances critiques manquantes")
        else:
            self.install_button.setEnabled(False)
            self.install_button.setText("‚úÖ Toutes les d√©pendances sont install√©es")
            self.log_text.append("‚úÖ Toutes les d√©pendances critiques sont disponibles")
            
    def _create_dependency_widget(self, package_key: str, result: Dict) -> QWidget:
        """Cr√©e un widget pour afficher l'√©tat d'une d√©pendance"""
        from qgis.PyQt.QtWidgets import QWidget, QHBoxLayout, QLabel
        from qgis.PyQt.QtCore import Qt
        
        widget = QWidget()
        layout = QHBoxLayout(widget)
        
        # Ic√¥ne de statut
        status_icon = "‚úÖ" if result['available'] else "‚ùå"
        status_label = QLabel(status_icon)
        status_label.setMinimumWidth(30)
        layout.addWidget(status_label)
        
        # Nom du package
        name_label = QLabel(result['info']['name'])
        name_label.setMinimumWidth(150)
        font = QFont()
        font.setBold(True)
        name_label.setFont(font)
        layout.addWidget(name_label)
        
        # Version
        version_text = result.get('version', 'Non install√©')
        version_label = QLabel(version_text)
        version_label.setMinimumWidth(100)
        layout.addWidget(version_label)
        
        # Description
        desc_label = QLabel(result['info']['description'])
        layout.addWidget(desc_label)
        
        # Informations suppl√©mentaires pour certains packages
        if package_key == 'torch' and result['available']:
            cuda_info = "üöÄ CUDA" if result.get('cuda_available') else "üíª CPU"
            cuda_label = QLabel(cuda_info)
            layout.addWidget(cuda_label)
        
        layout.addStretch()
        
        # Style selon l'√©tat
        if not result['available'] and result['info']['critical']:
            widget.setStyleSheet("QWidget { background-color: #ffebee; border-left: 3px solid #f44336; }")
        elif result['available']:
            widget.setStyleSheet("QWidget { background-color: #e8f5e8; border-left: 3px solid #4caf50; }")
        
        return widget
        
    def install_missing_dependencies(self):
        """Lance l'installation des d√©pendances manquantes"""
        missing_packages = []
        
        for package_key, result in self.dependency_results.items():
            if not result['available'] and result['info']['critical']:
                missing_packages.append(result['info']['pip_name'])
        
        if not missing_packages:
            QMessageBox.information(self, "Information", "Aucune d√©pendance √† installer")
            return
            
        if not self.checker.pip_available:
            QMessageBox.critical(self, "Erreur", 
                               "pip n'est pas disponible dans cet environnement Python.\n"
                               "Veuillez installer les d√©pendances manuellement.")
            return
        
        # Confirmation
        reply = QMessageBox.question(self, "Confirmation", 
                                   f"Installer {len(missing_packages)} d√©pendance(s) ?\n\n"
                                   f"Packages: {', '.join(missing_packages)}\n\n"
                                   f"L'installation peut prendre plusieurs minutes.",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply != QMessageBox.Yes:
            return
            
        # Lancement de l'installation
        self.install_button.setEnabled(False)
        self.refresh_button.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.installer = DependencyInstaller(missing_packages)
        self.installer.progress_updated.connect(self._on_installation_progress)
        self.installer.installation_finished.connect(self._on_installation_finished)
        self.installer.start()
        
    def _on_installation_progress(self, progress: int, message: str):
        """Met √† jour la progression de l'installation"""
        self.progress_bar.setValue(progress)
        self.log_text.append(message)
        
    def _on_installation_finished(self, success: bool, message: str):
        """G√®re la fin de l'installation"""
        self.progress_bar.setVisible(False)
        self.install_button.setEnabled(True)
        self.refresh_button.setEnabled(True)
        self.log_text.append(message)
        
        if success:
            QMessageBox.information(self, "Succ√®s", 
                                  "Installation termin√©e avec succ√®s !\n\n"
                                  "Red√©marrez QGIS pour que les changements prennent effet.")
        else:
            # Proposer l'installation manuelle en cas d'√©chec
            reply = QMessageBox.question(self, "Installation incompl√®te", 
                              "L'installation automatique a √©chou√©.\n\n"
                              "Voulez-vous voir les commandes d'installation manuelle ?",
                              QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                self._show_manual_installation_guide()
        
        # Actualisation automatique
        QTimer.singleShot(1000, self.check_dependencies)
    
    def _show_manual_installation_guide(self):
        """Affiche un guide d'installation manuelle"""
        import sys
        
        # Obtenir les packages manquants
        missing_packages = []
        for package_key, result in self.dependency_results.items():
            if not result['available'] and result['info']['critical']:
                missing_packages.append(result['info']['pip_name'])
        
        if not missing_packages:
            return
        
        # Cr√©er les commandes d'installation
        python_exe = sys.executable
        commands = []
        
        for package in missing_packages:
            if package == 'torch':
                commands.append(f'"{python_exe}" -m pip install --user torch torchvision')
            else:
                commands.append(f'"{python_exe}" -m pip install --user {package}')
        
        # Cr√©er le dialog d'installation manuelle
        dialog = QDialog(self)
        dialog.setWindowTitle("Guide d'Installation Manuelle")
        dialog.resize(600, 400)
        
        layout = QVBoxLayout(dialog)
        
        # Instructions
        instructions = QLabel("""
<h3>Installation Manuelle des D√©pendances</h3>
<p>Ouvrez une invite de commande (CMD sur Windows) ou un terminal et ex√©cutez les commandes suivantes :</p>
        """)
        instructions.setWordWrap(True)
        layout.addWidget(instructions)
        
        # Zone de texte avec les commandes
        commands_text = QTextEdit()
        commands_text.setPlainText('\n'.join(commands))
        commands_text.selectAll()  # S√©lectionner tout pour faciliter la copie
        layout.addWidget(commands_text)
        
        # Instructions additionnelles
        additional_info = QLabel("""
<p><b>Instructions :</b></p>
<ul>
<li>Copiez-collez chaque commande dans votre invite de commande</li>
<li>Appuyez sur Entr√©e pour ex√©cuter chaque commande</li>
<li>Attendez que chaque installation se termine avant la suivante</li>
<li>Red√©marrez QGIS apr√®s l'installation</li>
</ul>
        """)
        additional_info.setWordWrap(True)
        layout.addWidget(additional_info)
        
        # Boutons
        button_layout = QHBoxLayout()
        
        copy_button = QPushButton("üìã Copier les Commandes")
        copy_button.clicked.connect(lambda: self._copy_to_clipboard('\n'.join(commands)))
        button_layout.addWidget(copy_button)
        
        close_button = QPushButton("Fermer")
        close_button.clicked.connect(dialog.accept)
        button_layout.addWidget(close_button)
        
        layout.addLayout(button_layout)
        
        dialog.exec_()
    
    def _copy_to_clipboard(self, text: str):
        """Copie le texte dans le presse-papiers"""
        try:
            from qgis.PyQt.QtWidgets import QApplication
            clipboard = QApplication.clipboard()
            clipboard.setText(text)
            QMessageBox.information(self, "Copi√©", "Commandes copi√©es dans le presse-papiers !")
        except Exception:
            pass


def show_dependency_manager(parent=None):
    """Affiche le gestionnaire de d√©pendances"""
    dialog = DependencyDialog(parent)
    return dialog.exec_()


def check_dependencies_silent() -> Tuple[bool, List[str]]:
    """
    V√©rification silencieuse des d√©pendances
    
    Returns:
        Tuple[bool, List[str]]: (all_available, missing_critical_packages)
    """
    checker = DependencyChecker()
    results = checker.check_all_dependencies()
    
    missing_critical = []
    for package_key, result in results.items():
        if not result['available'] and result['info']['critical']:
            missing_critical.append(result['info']['name'])
    
    return len(missing_critical) == 0, missing_critical


if __name__ == "__main__":
    # Test autonome
    from qgis.PyQt.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    show_dependency_manager()
    sys.exit(app.exec_())